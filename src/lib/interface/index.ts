// Code generated by tygo. DO NOT EDIT.

//////////
// source: constellation_types.go

export interface Filter {
  /**
   * Namespace to filter for, if empty all namespaces are used
   */
  namespaces?: string[];
  /**
   * Labels to filter for, if empty all labels are used
   */
  labels?: { [key: string]: string};
}
/**
 * ConstellationSpec defines the desired state of Constellation
 */
export interface ConstellationSpec {
  /**
   * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
   * Filters is a list of filters that are used to select the data interfaces and data processes
   * If empty, all data interfaces and data processes are used
   */
  filters?: Filter[];
  /**
   * TargetConfigMap is the name of the config map that is used to store the constellation
   * it uses the same namespace as the constellation
   * +operator-sdk:csv:customresourcedefinitions:type=spec
   * +required
   */
  targetConfigMap?: string;
  /**
   * Name is the displayed name of the constellation
   * +operator-sdk:csv:customresourcedefinitions:type=spec
   * +required
   */
  name?: string;
  /**
   * Description is a human-readable description of the constellation
   * +operator-sdk:csv:customresourcedefinitions:type=spec
   * +optional
   */
  description?: string;
}
export interface ConstellationInterface {
  /**
   * Name is the displayed name of the data interface
   */
  name?: string;
  /**
   * Reference is a cluster-wide unique identifier for the data interface
   */
  reference?: string;
  /**
   * Type is the type of the data interface (e.g. "topic", "queue", "database", "file")
   */
  type?: string;
  /**
   * Description is a human-readable description of the data interface
   */
  description?: string;
  /**
   * Labels is a set of labels for the data interface
   */
  labels?: { [key: string]: string};
  /**
   * Source is the namespaced name of the data interface
   */
  source?: NamespacedName;
}
export interface ConstellationEdge {
  /**
   * References the data interface
   */
  reference?: string;
  /**
   * Info is a human-readable description of the data interface
   */
  info?: string;
  /**
   * Trigger is true if the data interface triggers further processing
   * Outgoing edges to kafka topics usually have this set to true while
   * incoming edges from kafka topics usually have this set to true.
   */
  trigger?: boolean;
  /**
   * Description is a human-readable description of the data interface
   */
  description?: string;
}
export interface ConstellationDataProcess {
  /**
   * Name is the displayed name of the data process
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  name?: string;
  /**
   * Type is the type of the data process (e.g. "spring-cloud-stream", "kafka-streams", "spark-streaming")
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  type?: string;
  /**
   * Description is a human-readable description of the data process
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  description?: string;
  /**
   * Inputs is a list of data interfaces that are used as input for the data process
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  inputs?: ConstellationEdge[];
  /**
   * Outputs is a list of data interfaces that are used as output for the data process
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  outputs?: ConstellationEdge[];
  /**
   * Labels is a set of labels for the data interface
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  labels?: { [key: string]: string};
  /**
   * Source is the namespaced name of the data process
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  source?: NamespacedName;
}
export interface ConstellationResult {
  name?: string;
  description?: string;
  lastUpdated?: any /* metav1.Time */;
  dataInterfaceList: ConstellationInterface[];
  dataProcessList: ConstellationDataProcess[];
}
/**
 * ConstellationStatus defines the observed state of Constellation
 */
export interface ConstellationStatus {
  /**
   * ConstellationResult is the result of the constellation
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  constellationResult?: ConstellationResult;
  /**
   * Conditions store the status conditions of the constellation
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  conditions?: any /* metav1.Condition */[];
}
/**
 * Constellation is the Schema for the constellations API
 */
export interface Constellation {
  TypeMeta: any /* metav1.TypeMeta */;
  metadata?: any /* metav1.ObjectMeta */;
  spec?: ConstellationSpec;
  status?: ConstellationStatus;
}
/**
 * ConstellationList contains a list of Constellation
 */
export interface ConstellationList {
  TypeMeta: any /* metav1.TypeMeta */;
  metadata?: any /* metav1.ListMeta */;
  items: Constellation[];
}

//////////
// source: datainterface_types.go

/**
 * DataInterfaceSpec defines the desired state of DataInterface
 */
export interface DataInterfaceSpec {
  /**
   * Name is the displayed name of the data interface
   */
  name?: string;
  /**
   * Reference is a cluster-wide unique identifier for the data interface
   * if empty, the name will be used as reference instead
   * +optional
   */
  reference?: string;
  /**
   * Type is the type of the data interface (e.g. "topic", "queue", "database", "file")
   */
  type?: string;
  /**
   * Description is a human-readable description of the data interface
   * +optional
   */
  description?: string;
}
/**
 * DataInterfaceStatus defines the observed state of DataInterface
 */
export interface DataInterfaceStatus {
  /**
   * UsedReferences is the generated name of the data interface
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  usedReference?: string;
  /**
   * UsedInDataProcesses is a list of data processes that use this data interface
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  usedInDataProcesses?: NamespacedName[];
  /**
   * Conditions store the status conditions of the data interface
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  conditions?: any /* metav1.Condition */[];
}
/**
 * DataInterface is the Schema for the datainterfaces API
 */
export interface DataInterface {
  TypeMeta: any /* metav1.TypeMeta */;
  metadata?: any /* metav1.ObjectMeta */;
  spec?: DataInterfaceSpec;
  status?: DataInterfaceStatus;
}
/**
 * DataInterfaceList contains a list of DataInterface
 */
export interface DataInterfaceList {
  TypeMeta: any /* metav1.TypeMeta */;
  metadata?: any /* metav1.ListMeta */;
  items: DataInterface[];
}

//////////
// source: dataprocess_types.go

/**
 * Edge is a data interface that is used as input or output for a data process
 */
export interface Edge {
  /**
   * References the data interface
   */
  reference?: string;
  /**
   * Info is a human-readable description of the data interface
   */
  info?: string;
  /**
   * Trigger is true if the data interface triggers further processing
   * Outgoing edges to kafka topics usually have this set to true while
   * incoming edges from kafka topics usually have this set to true.
   */
  trigger?: boolean;
  /**
   * Description is a human-readable description of the data interface
   * +optional
   */
  description?: string;
}
/**
 * DataProcessSpec defines the desired state of DataProcess
 */
export interface DataProcessSpec {
  /**
   * Name is the displayed name of the data process
   */
  name?: string;
  /**
   * Type is the type of the data process (e.g. "spring-cloud-stream", "kafka-streams", "spark-streaming")
   */
  type?: string;
  /**
   * Description is a human-readable description of the data process
   */
  description?: string;
  /**
   * Inputs is a list of data interfaces that are used as input for the data process
   */
  inputs?: Edge[];
  /**
   * Outputs is a list of data interfaces that are used as output for the data process
   */
  outputs?: Edge[];
}
/**
 * DataProcessStatus defines the observed state of DataProcess
 */
export interface DataProcessStatus {
  /**
   * Important: Run "make" to regenerate code after modifying this file
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  missingDataInterfaces?: string[];
  /**
   * Loaded is true if the data process is loaded into the system
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  loaded?: boolean;
  /**
   * Conditions store the status conditions of the data process
   * +operator-sdk:csv:customresourcedefinitions:type=status
   */
  conditions?: any /* metav1.Condition */[];
}
/**
 * DataProcess is the Schema for the dataprocesses API
 */
export interface DataProcess {
  TypeMeta: any /* metav1.TypeMeta */;
  metadata?: any /* metav1.ObjectMeta */;
  spec?: DataProcessSpec;
  status?: DataProcessStatus;
}
/**
 * DataProcessList contains a list of DataProcess
 */
export interface DataProcessList {
  TypeMeta: any /* metav1.TypeMeta */;
  metadata?: any /* metav1.ListMeta */;
  items: DataProcess[];
}

//////////
// source: index.go

export interface ConstellationInfo {
  fileName: string;
  name: string;
  description: string;
  lastModified: any /* metav1.Time */;
  source: NamespacedName;
}

//////////
// source: shared.go

export interface NamespacedName {
  namespace?: string;
  name?: string;
}
