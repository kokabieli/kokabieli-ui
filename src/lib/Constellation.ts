// Code generated by tygo. DO NOT EDIT.

//////////
// source: constellation.go

export interface Constellation {
    interfaces: DataInterfaceDefinition[];
    processes: DataProcessDefinition[];
}
export interface InputInfo {
    /**
     * DataDefinition Source
     */
    source: string;
    /**
     * Info that should be displayed
     */
    info: string;
    /**
     * trigger signifies a stronger binding
     */
    trigger: boolean;
}
export interface OutputInfo {
    /**
     * DataDefinition Target
     */
    target: string;
    /**
     * Info that should be displayed
     */
    info: string;
    /**
     * trigger signifies a stronger binding
     */
    trigger: boolean;
}
export interface KubernetesInfo {
    /**
     * Namespace that this is deployed to - can be used for filtering
     */
    namespace: string;
    /**
     * ApiVersion on kubernetes
     */
    apiVersion: string;
    /**
     * Kind on kubernetes
     */
    kind: string;
    /**
     * Labels on kubernetes
     */
    labels: { [key: string]: string};
    /**
     * Name on kubernetes
     */
    name: string;
}
export interface DataProcessDefinition {
    id: string;
    name: string;
    shortName?: string;
    /**
     * Type is usually type that is used to display the app
     */
    type: string;
    /**
     * Icon that represents the process
     */
    icon?: string;
    /**
     * Colory - can be up, down, failing, unknown
     */
    color: string;
    /**
     * Inputs references to data interfaces that this processor consumes
     */
    inputs: InputInfo[];
    /**
     * Outputs references to data interfaces that this processor consumes
     */
    outputs: OutputInfo[];
    /**
     * KubernetesInfo (underlying objects if available)
     */
    kubernetesInfo: KubernetesInfo[];
    /**
     * Group can be used for filtering for kubernetes usually namespace, can also be used to group processes
     */
    labels: { [key: string]: string};
    description: string;
}
export interface DataInterfaceDefinition {
    id: string;
    name: string;
    shortName?: string;
    /**
     * Type can be memory, database, topic, rest, grpc for default values
     */
    type: string;
    /**
     * Icon that represents the interface
     */
    icon?: string;
    /**
     * Color - valid hex c
     */
    color: string;
    /**
     * KubernetesInfo (underlying objects if available)
     */
    kubernetesInfo: KubernetesInfo[];
    /**
     * Group can be used for filtering for kubernetes usually namespace, can also be used to group processes by
     */
    labels: { [key: string]: string};
    description: string;
}
